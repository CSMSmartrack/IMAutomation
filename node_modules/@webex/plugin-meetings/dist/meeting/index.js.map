{"version":3,"sources":["index.js"],"names":["Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","audioVideo","Media","getUserMedia","then","response","reject","MediaError","resolve","getDevices","id","uuid","v4","correlationId","userId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","video","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","convoId","locusUrl","locus","url","sipUri","partner","type","owner","hostId","policy","meetingRequest","MeetingRequest","locusInfo","LocusInfo","updateMeetingObject","bind","mediaProperties","MediaProperties","inMeetingActions","InMeetingActions","isSharing","callEvents","setUpLocusInfoListeners","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","on","EVENTS","LOCUS_INFO_CAN_ASSIGN_HOST","payload","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","LoggerProxy","logger","error","identifiers","deviceId","locusId","split","pop","locusStartTime","fullState","lastActive","Metrics","initPayload","internal","metrics","submitCallDiagnosticEvents","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","LOCUS_INFO_UPDATE_MEDIA_SHARES","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","info","newCanLock","newCanUnlock","self","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","SELF_MUTED_BY_OTHERS","MEETING_SELF_MUTED_BY_OTHERS","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","postEvent","eventType","LOBBY_ENTERED","meeting","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","REMOTE_ANSWERED_DECLINED","remote","DESTROY_MEETING","wirelessShare","shareTrack","onended","stop","shouldLeave","leave","warn","catch","cleanUp","meetingId","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","memberId","removeMember","mute","muteMember","transferHostToMember","override","createStats","log","StatsUtil","generateOptions","STATS","CONFIG","config","WebRTCStats","destroySenders","destroyReceivers","isMuted","isSelf","body","errors","setSipUri","sipMeetingUri","setLocus","participants","getLocusPartner","_CALL_","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","selfId","mediaId","host","initialSetup","pc","ontrack","streams","remoteStream","MEDIA_READY","EVENT_TYPES","REMOTE_AUDIO","stream","MediaUtil","createMediaStream","getAudioTracks","REMOTE_VIDEO","getVideoTracks","REMOTE_SHARE","unsetRemoteStream","stopStream","MEDIA_STOPPED","REMOTE","remoteShare","localStream","setLocalAudioTrack","getTrack","audioTrack","setLocalVideoTrack","videoTrack","LOCAL","localShare","setLocalShareTrack","contentTracks","stopShare","LOCAL_SHARE","stopTracks","unsetLocalVideoTrack","unsetLocalShareTrack","reconnection","detection","mercury","ONLINE","reconnect","PeerConnectionManager","close","peerConnection","unsetPeerConnection","off","toggle","ParameterError","MUTED","data","USER_INTERACTION","mediaType","AUDIO","e","UNMUTED","VIDEO","mediaSettings","joinOptions","audioVideoOptions","join","joinResponse","addMedia","mediaResponse","media","local","MEETING_RECONNECTION_STARTING","MEDIA_RECONNECTING","MEETING_RECONNECTION_SUCCESS","MEDIA_RECOVERED","MEETING_RECONNECTION_FAILURE","ReconnectionError","MEDIA_RECONNECTION_FAILED","finally","reset","CALL_INITIATED","pstnAudioType","hostPin","pinCollection","state","MEETING_STATE_MACHINE","STATES","ENDED","RINGING","ring","_JOIN_","resourceId","destination","joinMeetingOptions","fail","mediaCapabilities","rx","share","share_audio","whiteboard","tx","moveMedia","moveToResource","updateMedia","sendVideo","receiveVideo","sendAudio","receiveAudio","sendShare","receiveShare","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","isUnjoined","guest","MEDIA_CAPABILITIES","validateOptions","setPeerConnectionEvents","preMedia","attachMedia","setRemoteStream","startInternalStats","err","sendRoapMediaRequest","sdp","previousSendShareStatus","setContentSlides","checkForStopShare","startShare","audioTransceiver","track","updateTransceiver","sendTrack","receiveTrack","transceiver","previousMediaDirection","videoTransceiver","previousShareStatus","shareTransceiver","setMediaDirection","AudioStateMachine","VideoStateMachine","setLocalTracks","_INCOMING_","acknowledgeMeeting","ALERT_DISPLAYED","message","reason","_BUSY_","declineMeeting","decline","LEAVE","canProceed","content","mediaShares","find","element","name","CONTENT","SHARE_INITIATED","changeMeetingFloor","disposition","FLOOR_ACTION","GRANTED","personUrl","uri","resourceUrl","MEETING_STARTED_SHARING_LOCAL","LOCAL_SHARE_FLOOR_GRANTED","SHARE_STOPPED","RELEASED","MEETING_STOPPED_SHARING_LOCAL","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport {\n  MEETINGS,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\n\nimport InMeetingActions from './in-meeting-actions';\n\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [hostPin]\n * @property {Boolean} [moderator]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meetings\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.webex, this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const {event, trackingId, locus} = options;\n\n    if (!event) {\n      LoggerProxy.logger.error('Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n      return;\n    }\n\n    const identifiers = {\n      correlationId: this.correlationId,\n      userId: this.userId,\n      deviceId: this.deviceUrl\n    };\n\n    // If locus is passed take the value from there else use meeting object\n    if (locus) {\n      identifiers.locusId = locus.url.split('/').pop();\n      identifiers.locusStartTime = locus.fullState.lastActive;\n    }\n    else if (this.locusUrl && this.locusInfo.fullState) {\n      identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n      identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n    }\n\n    if (options.trackingId) {\n      identifiers.trackingId = trackingId;\n    }\n\n    const payload = Metrics.initPayload(options.event, identifiers, options);\n\n    this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave().then(() => {\n          LoggerProxy.logger.warn('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            response: payload,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {String} meetingInfo.convoId\n   * @param {String} meetingInfo.locusUrl\n   * @param {String} meetingInfo.sipUri\n   * @param {Object} meetingInfo.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoId = meetingInfo.body.convoId || this.convoId;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index->setRemoteStream/ontrack#Event received for peerConnection: ${event}`);\n      // const {transceiver} = event;\n      const streams = event.streams[0];\n\n      this.mediaProperties.remoteStream = streams;\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_AUDIO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getAudioTracks()[0]])\n        }\n      );\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_VIDEO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[0]])\n        }\n      );\n\n      if (this.mediaProperties.remoteStream.getVideoTracks()[1]) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: EVENT_TYPES.REMOTE_SHARE,\n            stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[1]])\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: EVENT_TYPES.REMOTE\n        }\n      );\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_SHARE,\n          stream: this.mediaProperties.remoteShare\n        }\n      );\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      this.mediaProperties.setLocalAudioTrack(MeetingUtil.getTrack(localStream).audioTrack);\n      this.mediaProperties.setLocalVideoTrack(MeetingUtil.getTrack(localStream).videoTrack);\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: localStream\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave();\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopTracks(this.mediaProperties.audioTrack)\n      .then(() => Media.stopTracks(this.mediaProperties.videoTrack))\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalStream'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL\n          }\n        );\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopTracks(this.mediaProperties.shareTrack).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: EVENT_TYPES.LOCAL_SHARE\n        }\n      );\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * Sets the peer connections on the class\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setPeerConnections() {\n    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n    if (this.config.reconnection.detection) {\n      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n      // if the meeting has active peer connections, it should try to reconnect.\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.reconnect();\n      });\n    }\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        LoggerProxy.logger.info('meeting/index->muteAudio#Audio mute successful.');\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n\n        return Promise.resolve();\n      })\n      .catch((e) => {\n        LoggerProxy.logger.error(`meeting/index->muteAudio#Audio mute error ${e}`);\n      });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    return this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n    const options = {};\n\n    options.mute = false;\n    options.self = true;\n\n    return this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => {\n            Promise.resolve({\n              join: joinResponse,\n              media: mediaResponse,\n              local: [localStream, localShare]\n            });\n          })))\n      .catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect() {\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n    Metrics.postEvent({event: eventType.MEDIA_RECONNECTING, meeting: this});\n\n    return this.reconnectionManager\n      .reconnect(this)\n      .then((reconnect) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS,\n          {\n            reconnect\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this\n        });\n\n        return Promise.resolve(reconnect);\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECONNECTION_FAILED,\n          meeting: this\n        });\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally((reconnect) => {\n        this.reconnectionManager.reset();\n\n        return Promise.resolve(reconnect);\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoId, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    // Should PIN collection be followed by pin propt ???\n    if (options.hostPin) {\n      Metrics.pinCollection({meeting: this});\n    }\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n\n      return Promise.resolve(join);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (mediaDirection, audioVideo = {}) => Media.getUserMedia(mediaDirection, audioVideo)\n    .then((response) => {\n      if (!response[0] && !response[1]) {\n        return Promise.reject(new MediaError('Was not able to retrive media Stream'));\n      }\n\n      return Promise.resolve(response);\n    });\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    if (MeetingUtil.isUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        MeetingUtil.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->addMedia#PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          MeetingUtil.startInternalStats(this);\n        })\n        .catch((err) => {\n          this.logger.error('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n          throw err;\n        })\n        .then(() =>\n          this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            })\n            .catch((err) => {\n              this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n              throw err;\n            }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->updateMedia#PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updatedMedia, ', err);\n          throw err;\n        })\n        .then(() =>\n          this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updateMedia on send roap media request, ', err);\n              throw err;\n            }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver(\n        {\n          type: 'audio',\n          sendTrack: options.sendAudio,\n          receiveTrack: options.receiveAudio,\n          track,\n          transceiver: audioTransceiver,\n          peerConnection: this.mediaProperties.peerConnection,\n          previousMediaDirection: {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          }\n        },\n        {\n          mediaProperties: this.mediaProperties,\n          roapSeq: this.roapSeq,\n          meeting: this,\n          id: this.id\n        }\n      ))\n      .then(() => {\n        this.mediaProperties.setLocalAudioTrack(track);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.mediaProperties.setLocalVideoTrack(track);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.mediaProperties.setLocalShareTrack(track);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options An object of options\n   * @param {Boolean} options.keepLocalMedia Whether to tear down the local media connections or not.\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        // if (this.wirelessShare || this.guest) {\n        //   // If screen sharing clean the meeting object\n        //   Trigger.trigger(\n        //     this,\n        //     {\n        //       file: 'meeting/index',\n        //       function: 'leave'\n        //     },\n        //     EVENTS.DESTROY_MEETING,\n        //     {\n        //       meetingId: this.id\n        //     }\n        //   );\n        // }\n\n        return Promise.resolve(leave);\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->share#Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->stopShare#Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n}\n"]}