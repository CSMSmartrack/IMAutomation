{"version":3,"sources":["util.js"],"names":["MeetingInfoUtil","getParsedUrl","link","parsedUrl","url","parse","protocol","HTTPS_PROTOCOL","error","LoggerProxy","logger","warn","isMeetingLink","value","hostNameBool","hostname","includes","WEBEX_DOT_COM","pathNameBool","pathname","MEET","MEET_M","JOIN","convertLinkToSip","user","userIndex","lastIndexOf","substring","company","companyIndex","replace","WWW_DOT","isSipUri","sipString","sipUri","DIALER_REGEX","SIP_ADDRESS","exec","isPhoneNumber","phoneNumber","isValidNumber","PHONE_NUMBER","test","generateOptions","from","destination","type","conversationServiceUrl","options","_MEETING_LINK_","_SIP_URI_","_CONVERSATION_URL_","CONVERSATIONS","getResourceUrl","resource","LOCI","MEETINGINFO","method","HTTP_VERBS","GET","_PERSONAL_ROOM_","_MEETING_ID_","TYPE","USE_URI_LOOKUP_FALSE","PUT","_LOCUS_ID_","getRequestParams","resourceOptions","api","requestParams","concat","ALTERNATE_REDIRECT_TRUE","body","lookupType","getMeetingInfoAPIFormat"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AAEA;;;;AACA;;;;AAuBA,IAAMA,kBAAkB,EAAxB;;AAEAA,gBAAgBC,YAAhB,GAA+B,UAACC,IAAD,EAAU;AACvC,MAAI;AACF,QAAIC,YAAYC,cAAIC,KAAJ,CAAUH,IAAV,CAAhB;;AAEA,QAAI,CAACC,SAAL,EAAgB;AACd,aAAO,KAAP;AACD;AACD;AACA,QAAI,CAACA,UAAUG,QAAf,EAAyB;AACvBH,kBAAYC,cAAIC,KAAJ,MAAaE,yBAAb,GAA8BL,IAA9B,CAAZ;AACD;;AAED,WAAOC,SAAP;AACD,GAZD,CAaA,OAAOK,KAAP,EAAc;AACZC,0BAAYC,MAAZ,CAAmBC,IAAnB,oEAAyFH,KAAzF;;AAEA,WAAO,IAAP;AACD;AACF,CAnBD;;AAqBA;;;;;AAKAR,gBAAgBY,aAAhB,GAAgC,UAACC,KAAD,EAAW;AACzC,MAAMV,YAAYH,gBAAgBC,YAAhB,CAA6BY,KAA7B,CAAlB;AACA,MAAMC,eAAeX,UAAUY,QAAV,IAAsBZ,UAAUY,QAAV,CAAmBC,QAAnB,CAA4BC,wBAA5B,CAA3C;AACA,MAAMC,eAAef,UAAUgB,QAAV,KAAuBhB,UAAUgB,QAAV,CAAmBH,QAAnB,OAAgCI,eAAhC,KAA2CjB,UAAUgB,QAAV,CAAmBH,QAAnB,OAAgCK,iBAAhC,CAA3C,IAAwFlB,UAAUgB,QAAV,CAAmBH,QAAnB,OAAgCM,eAAhC,CAA/G,CAArB;;AAEA,SAAOR,gBAAgBI,YAAvB;AACD,CAND;;AAQAlB,gBAAgBuB,gBAAhB,GAAmC,UAACV,KAAD,EAAW;AAC5C,MAAMV,YAAYH,gBAAgBC,YAAhB,CAA6BY,KAA7B,CAAlB;;AAEA,MAAI,CAACV,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;AACD,MAAIqB,aAAJ;;AAEA,MAAIrB,UAAUgB,QAAd,EAAwB;AACtB,QAAMM,YAAYtB,UAAUgB,QAAV,CAAmBO,WAAnB,CAA+B,GAA/B,CAAlB;;AAEAF,WAAOrB,UAAUgB,QAAV,CAAmBQ,SAAnB,CAA6BF,YAAY,CAAzC,CAAP;AACD;AACD,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;AACD,MAAII,gBAAJ;;AAEA,MAAIzB,UAAUY,QAAd,EAAwB;AACtB,QAAMc,eAAe1B,UAAUY,QAAV,CAAmBW,WAAnB,OAAmCT,wBAAnC,CAArB;;AAEAW,cAAUzB,UAAUY,QAAV,CAAmBY,SAAnB,CAA6B,CAA7B,EAAgCE,YAAhC,EAA8CC,OAA9C,CAAsDC,kBAAtD,EAA+D,EAA/D,CAAV;AACD;AACD,MAAI,CAACH,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SAAUJ,IAAV,SAAkBI,OAAlB,SAA6BX,wBAA7B;AACD,CA5BD;;AA+BAjB,gBAAgBgC,QAAhB,GAA2B,UAACC,SAAD,EAAe;AACxC;AACA;AACA,MAAMC,SAASC,wBAAaC,WAAb,CAAyBC,IAAzB,CAA8BJ,SAA9B,CAAf;;AAEA,SAAOC,MAAP;AACD,CAND;;AAQAlC,gBAAgBsC,aAAhB,GAAgC,UAACC,WAAD,EAAiB;AAC/C,MAAMC,gBAAgBL,wBAAaM,YAAb,CAA0BC,IAA1B,CAA+BH,WAA/B,CAAtB;;AAEA,SAAOC,aAAP;AACD,CAJD;;AAMAxC,gBAAgB2C,eAAhB,GAAkC,UAACC,IAAD,EAAU;AAAA,MACnCC,WADmC,GACUD,IADV,CACnCC,WADmC;AAAA,MACtBC,IADsB,GACUF,IADV,CACtBE,IADsB;AAAA,MAChBC,sBADgB,GACUH,IADV,CAChBG,sBADgB;;;AAG1C,MAAID,IAAJ,EAAU;AACR,WAAO;AACLD,8BADK;AAELC;AAFK,KAAP;AAID;AACD,MAAME,UAAU,EAAhB;;AAEA,MAAIhD,gBAAgBY,aAAhB,CAA8BiC,WAA9B,CAAJ,EAAgD;AAC9CG,YAAQF,IAAR,GAAeG,yBAAf;AACAD,YAAQH,WAAR,GAAsBA,WAAtB;AACD,GAHD,MAIK,IAAI7C,gBAAgBgC,QAAhB,CAAyBa,WAAzB,CAAJ,EAA2C;AAC9CG,YAAQF,IAAR,GAAeI,oBAAf;AACAF,YAAQH,WAAR,GAAsBA,WAAtB;AACD,GAHI,MAIA,IAAI7C,gBAAgBsC,aAAhB,CAA8BO,WAA9B,CAAJ,EAAgD;AACnDG,YAAQF,IAAR,GAAeI,oBAAf;AACAF,YAAQH,WAAR,GAAsBA,WAAtB;AACD,GAHI,MAIA;AACHG,YAAQF,IAAR,GAAeK,6BAAf;AACAH,YAAQH,WAAR,GAAyBE,sBAAzB,SAAmDK,wBAAnD,SAAoEP,WAApE;AACD;;AAED,SAAOG,OAAP;AACD,CA7BD;;AA+BA;;;;;;AAMAhD,gBAAgBqD,cAAhB,GAAiC,UAACP,IAAD,EAAOjC,KAAP,EAAiB;AAChD,MAAIyC,iBAAeC,eAAf,SAAuBC,sBAA3B;AACA,MAAIC,SAASC,sBAAWC,GAAxB;;AAEA,UAAQb,IAAR;AACE,SAAKI,oBAAL;AACA,SAAKU,0BAAL;AACA,SAAKC,uBAAL;AACEP,uBAAeC,eAAf,SAAuBC,sBAAvB,SAAsC3C,KAAtC,SAA+CiD,eAA/C,SAAuDhB,IAAvD,SAA+DiB,+BAA/D;AACA;AACF,SAAKZ,6BAAL;AACEM,eAASC,sBAAWM,GAApB;AACA;AACF,SAAKC,qBAAL;AACEX,uBAAeC,eAAf,SAAuB1C,KAAvB,SAAgC2C,sBAAhC;AACAC,eAASC,sBAAWM,GAApB;AACA;AACF,SAAKf,yBAAL;AACEK,wBAAgBC,eAAhB,SAAwBC,sBAAxB,SAAuC,oBAAK3C,KAAL,CAAvC,SAAsDiD,eAAtD,SAA8Db,yBAA9D,SAAgFc,+BAAhF;AACA;AACF;AAhBF;;AAmBA,SAAO;AACLT,sBADK;AAELG;AAFK,GAAP;AAID,CA3BD;;AA6BAzD,gBAAgBkE,gBAAhB,GAAmC,UAACC,eAAD,EAAkBrB,IAAlB,EAAwBjC,KAAxB,EAA+BuD,GAA/B,EAAuC;AACxE,MAAMC,gBAAgB;AACpBZ,YAAQU,gBAAgBV,MADJ;AAEpBW,YAFoB;AAGpBd,cAAUa,gBAAgBb;AAHN,GAAtB;;AAMA,MAAIa,gBAAgBV,MAAhB,KAA2BC,sBAAWC,GAA1C,EAA+C;AAC7C;AACAU,kBAAcf,QAAd,GAAyBe,cAAcf,QAAd,CAAuBgB,MAAvB,OAAkCC,kCAAlC,CAAzB;AACD,GAHD,MAKA,IAAIzB,SAASmB,qBAAb,EAAyB;AACvB;AACAI,kBAAcf,QAAd,GAAyBe,cAAcf,QAAd,CAAuBgB,MAAvB,OAAkCC,kCAAlC,CAAzB;AACAF,kBAAcG,IAAd,GAAqB;AACnB3D,kBADmB;AAEnB4D,kBAAY3B;AAFO,KAArB;AAID;;AAED,SAAOuB,aAAP;AACD,CAtBD;;AAwBArE,gBAAgB0E,uBAAhB,GAA0C,UAAC1B,OAAD;AAAA,SAAc;AACtDF,UAAME,QAAQF,IADwC;AAEtDjC,WAAOmC,QAAQH;AAFuC,GAAd;AAAA,CAA1C;;kBAKe7C,e","file":"util.js","sourcesContent":["import url from 'url';\n\nimport btoa from 'btoa';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  _SIP_URI_,\n  _PERSONAL_ROOM_,\n  _MEETING_ID_,\n  _CONVERSATION_URL_,\n  CONVERSATIONS,\n  _LOCUS_ID_,\n  _MEETING_LINK_,\n  HTTP_VERBS,\n  USE_URI_LOOKUP_FALSE,\n  TYPE,\n  LOCI,\n  MEETINGINFO,\n  ALTERNATE_REDIRECT_TRUE,\n  DIALER_REGEX,\n  WEBEX_DOT_COM,\n  WWW_DOT,\n  JOIN,\n  MEET,\n  MEET_M,\n  HTTPS_PROTOCOL\n} from '../constants';\n\nconst MeetingInfoUtil = {};\n\nMeetingInfoUtil.getParsedUrl = (link) => {\n  try {\n    let parsedUrl = url.parse(link);\n\n    if (!parsedUrl) {\n      return false;\n    }\n    // hack for links such as <company>.webex.com/meet/<user> without a protocol\n    if (!parsedUrl.protocol) {\n      parsedUrl = url.parse(`${HTTPS_PROTOCOL}${link}`);\n    }\n\n    return parsedUrl;\n  }\n  catch (error) {\n    LoggerProxy.logger.warn(`MeetingInfoUtil->getParsedUrl#unable to parse the URL, error: ${error}`);\n\n    return null;\n  }\n};\n\n/**\n * Helper function to check if a string matches a known meeting link pattern\n * @param {String} value  string to parse and see if it matches a meeting link\n * @returns {Boolean}\n */\nMeetingInfoUtil.isMeetingLink = (value) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n  const hostNameBool = parsedUrl.hostname && parsedUrl.hostname.includes(WEBEX_DOT_COM);\n  const pathNameBool = parsedUrl.pathname && (parsedUrl.pathname.includes(`/${MEET}`) || parsedUrl.pathname.includes(`/${MEET_M}`) || parsedUrl.pathname.includes(`/${JOIN}`));\n\n  return hostNameBool && pathNameBool;\n};\n\nMeetingInfoUtil.convertLinkToSip = (value) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n\n  if (!parsedUrl) {\n    return null;\n  }\n  let user;\n\n  if (parsedUrl.pathname) {\n    const userIndex = parsedUrl.pathname.lastIndexOf('/');\n\n    user = parsedUrl.pathname.substring(userIndex + 1);\n  }\n  if (!user) {\n    return null;\n  }\n  let company;\n\n  if (parsedUrl.hostname) {\n    const companyIndex = parsedUrl.hostname.lastIndexOf(`.${WEBEX_DOT_COM}`);\n\n    company = parsedUrl.hostname.substring(0, companyIndex).replace(WWW_DOT, '');\n  }\n  if (!company) {\n    return null;\n  }\n\n  return `${user}@${company}.${WEBEX_DOT_COM}`;\n};\n\n\nMeetingInfoUtil.isSipUri = (sipString) => {\n  // TODO: lets remove regex from this equation and user URI matchers and such\n  // have not found a great sip uri parser library as of now\n  const sipUri = DIALER_REGEX.SIP_ADDRESS.exec(sipString);\n\n  return sipUri;\n};\n\nMeetingInfoUtil.isPhoneNumber = (phoneNumber) => {\n  const isValidNumber = DIALER_REGEX.PHONE_NUMBER.test(phoneNumber);\n\n  return isValidNumber;\n};\n\nMeetingInfoUtil.generateOptions = (from) => {\n  const {destination, type, conversationServiceUrl} = from;\n\n  if (type) {\n    return {\n      destination,\n      type\n    };\n  }\n  const options = {};\n\n  if (MeetingInfoUtil.isMeetingLink(destination)) {\n    options.type = _MEETING_LINK_;\n    options.destination = destination;\n  }\n  else if (MeetingInfoUtil.isSipUri(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  }\n  else if (MeetingInfoUtil.isPhoneNumber(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  }\n  else {\n    options.type = _CONVERSATION_URL_;\n    options.destination = `${conversationServiceUrl}/${CONVERSATIONS}/${destination}`;\n  }\n\n  return options;\n};\n\n/**\n * Helper function to build up a correct locus url depending on the value passed\n * @param {String} type One of [SIP_URI, PERSONAL_ROOM, MEETING_ID, CONVERSATION_URL, LOCUS_ID, MEETING_LINK]\n * @param {Object} value ?? value.value\n * @returns {Object} returns an object with {resource, method}\n */\nMeetingInfoUtil.getResourceUrl = (type, value) => {\n  let resource = `/${LOCI}/${MEETINGINFO}`;\n  let method = HTTP_VERBS.GET;\n\n  switch (type) {\n    case _SIP_URI_:\n    case _PERSONAL_ROOM_:\n    case _MEETING_ID_:\n      resource = `/${LOCI}/${MEETINGINFO}/${value}?${TYPE}=${type}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    case _CONVERSATION_URL_:\n      method = HTTP_VERBS.PUT;\n      break;\n    case _LOCUS_ID_:\n      resource = `/${LOCI}/${value}/${MEETINGINFO}`;\n      method = HTTP_VERBS.PUT;\n      break;\n    case _MEETING_LINK_:\n      resource = `$/${LOCI}/${MEETINGINFO}/${btoa(value)}?${TYPE}=${_MEETING_LINK_}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    default:\n  }\n\n  return {\n    resource,\n    method\n  };\n};\n\nMeetingInfoUtil.getRequestParams = (resourceOptions, type, value, api) => {\n  const requestParams = {\n    method: resourceOptions.method,\n    api,\n    resource: resourceOptions.resource\n  };\n\n  if (resourceOptions.method === HTTP_VERBS.GET) {\n    // for handling URL redirections\n    requestParams.resource = requestParams.resource.concat(`&${ALTERNATE_REDIRECT_TRUE}`);\n  }\n  else\n  if (type !== _LOCUS_ID_) {\n    // locus id check is a PUT not sure why\n    requestParams.resource = requestParams.resource.concat(`?${ALTERNATE_REDIRECT_TRUE}`);\n    requestParams.body = {\n      value,\n      lookupType: type\n    };\n  }\n\n  return requestParams;\n};\n\nMeetingInfoUtil.getMeetingInfoAPIFormat = (options) => ({\n  type: options.type,\n  value: options.destination\n});\n\nexport default MeetingInfoUtil;\n"]}