{"version":3,"sources":["index.js"],"names":["MeetingInfo","attrs","options","namespace","MEETINGS","meetingInfoRequest","MeetingInfoRequest","meetingInfoCollection","MeetingInfoCollection","id","get","info","set","fetchMeetingInfo","then","body","setMeetingInfo","sipMeetingUri","meetingLink","catch","error","reject","destination","type","MeetingInfoUtil","generateOptions","conversationServiceUrl","webex","internal","device","services","fetchInfoOptions","requestFetchInfo","_MEETING_LINK_","convertLinkToSip","_SIP_URI_","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;;AAMA;;;;AACA;;;;AACA;;;;;;AAEA;;;IAGqBA,W;;;AAGnB;;;;;AAKA,uBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAE1B;;;;;;;AAF0B,gJACpB,EADoB,EAChBA,OADgB;;AAAA,UAP5BC,SAO4B,GAPhBC,mBAOgB;AAS1B,UAAKC,kBAAL,GAA0B,IAAIC,iBAAJ,CAAuB,EAAvB,EAA2BJ,OAA3B,CAA1B;AACA;;;;;;;AAOA,UAAKK,qBAAL,GAA6B,IAAIC,oBAAJ,EAA7B;AAjB0B;AAkB3B;;AAED;;;;;;;;;;mCAMeC,E,EAAI;AACjB,aAAO,KAAKF,qBAAL,CAA2BG,GAA3B,CAA+BD,EAA/B,CAAP;AACD;;AAED;;;;;;;;;;mCAOeA,E,EAAIE,I,EAAM;AACvB,WAAKJ,qBAAL,CAA2BK,GAA3B,CAA+BH,EAA/B,EAAmCE,IAAnC;AACD;;AAED;;;;;;;;;;qCAOiBT,O,EAAS;AAAA;;AACxB,aAAO,KAAKG,kBAAL,CAAwBQ,gBAAxB,CAAyCX,OAAzC,EAAkDY,IAAlD,CAAuD,UAACH,IAAD,EAAU;AACtE,YAAIA,QAAQA,KAAKI,IAAjB,EAAuB;AACrB,iBAAKC,cAAL,CAAoBL,KAAKI,IAAL,CAAUE,aAAV,IAA2BN,KAAKI,IAAL,CAAUG,WAAzD,EAAsEP,KAAKI,IAA3E;AACD;;AAED,eAAOJ,IAAP;AACD,OANM,EAMJQ,KANI,CAME,UAACC,KAAD;AAAA,eAAW,kBAAQC,MAAR,CAAeD,KAAf,CAAX;AAAA,OANF,CAAP;AAOD;;AAED;;;;;;;;;;;qCAQiBE,W,EAAaC,I,EAAM;AAClC,aAAOC,eAAgBC,eAAhB,CAAgC;AACrCH,gCADqC;AAErCC,kBAFqC;AAGrCG,gCAAwB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCJ;AAHvB,OAAhC,CAAP;AAKD;;AAED;;;;;;;;;;;qCAQiBJ,W,EAA0B;AAAA;;AAAA,UAAbC,IAAa,uEAAN,IAAM;;AACzC,UAAMrB,UAAU,KAAK6B,gBAAL,CAAsBT,WAAtB,EAAmCC,IAAnC,CAAhB;;AAEA;AACA,aAAO,KAAKS,gBAAL,CAAsB9B,OAAtB,EAA+BiB,KAA/B,CAAqC,UAACC,KAAD,EAAW;AACrD;AACA,YAAIlB,QAAQqB,IAAR,KAAiBU,yBAArB,EAAqC;AACnC;AACA,iBAAO,OAAKD,gBAAL,CAAsB,OAAKD,gBAAL,CAAsBP,eAAgBU,gBAAhB,CAAiCZ,WAAjC,CAAtB,EAAqEa,oBAArE,CAAtB,CAAP;AACD;;AAED,eAAO,kBAAQd,MAAR,CAAeD,KAAf,CAAP;AACD,OARM,CAAP;AASD;;;EAvGsCgB,+B,GAnBzC;;;;kBAmBqBpC,W","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {\n  MEETINGS,\n  _MEETING_LINK_,\n  _SIP_URI_\n} from '../constants';\n\nimport MeetingInfoCollection from './collection';\nimport MeetingInfoRequest from './request';\nimport MeetingInfoUtil from './util';\n\n/**\n * @class MeetingInfo\n */\nexport default class MeetingInfo extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoRequest = new MeetingInfoRequest({}, options);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoCollection = new MeetingInfoCollection();\n  }\n\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n  getMeetingInfo(id) {\n    return this.meetingInfoCollection.get(id);\n  }\n\n  /**\n   * @param {string} id\n   * @param {object} info\n   * @returns {null}\n   * @public\n   * @memberof MeetingInfo\n   */\n  setMeetingInfo(id, info) {\n    this.meetingInfoCollection.set(id, info);\n  }\n\n  /**\n   * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n   * @param {Object} options\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  requestFetchInfo(options) {\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((info) => {\n      if (info && info.body) {\n        this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n      }\n\n      return info;\n    }).catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Helper to generate the options for the MeetingInfo request\n   * @param {String} destination\n   * @param {String} type\n   * @returns {Object}\n   * @private\n   * @memberof MeetingInfo\n   */\n  fetchInfoOptions(destination, type) {\n    return MeetingInfoUtil.generateOptions({\n      destination,\n      type,\n      conversationServiceUrl: this.webex.internal.device.services.conversationServiceUrl\n    });\n  }\n\n  /**\n   * Fetches meeting info from the server\n   * @param {String} destination one of many different types of destinations to look up info for\n   * @param {String} [type] to match up with the destination value\n   * @returns {Promise} returns a meeting info object\n   * @public\n   * @memberof MeetingInfo\n   */\n  fetchMeetingInfo(destination, type = null) {\n    const options = this.fetchInfoOptions(destination, type);\n\n    // fetch meeting info\n    return this.requestFetchInfo(options).catch((error) => {\n      // if it failed the first time as meeting link\n      if (options.type === _MEETING_LINK_) {\n        // convert the meeting link to sip URI and retry\n        return this.requestFetchInfo(this.fetchInfoOptions(MeetingInfoUtil.convertLinkToSip(destination), _SIP_URI_));\n      }\n\n      return Promise.reject(error);\n    });\n  }\n}\n"]}