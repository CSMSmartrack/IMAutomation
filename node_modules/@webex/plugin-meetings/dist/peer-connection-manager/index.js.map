{"version":3,"sources":["index.js"],"names":["pc","insertBandwidthLimit","sdpLines","index","limit","search","AUDIO","AUDIO_BANDWIDTH_LIMIT","VIDEO_BANDWIDTH_LIMIT","splice","SDP","B_LINE","setMaxFs","sdp","replaceSdp","payloadTypes","match","forEach","payload","replace","MAX_FS_8160","checkH264Support","videoPresent","h264Present","validateSdp","parsedSdp","sdpTransform","parse","media","mediaLine","candidates","length","LoggerProxy","logger","error","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","iceFailListener","peerConnection","fn","name","oniceconnectionstatechange","iceConnectionState","ICE_STATE","FAILED","DISCONNECTED","warn","Date","setTimeout","ICE_FAIL_TIMEOUT","detectFailures","reconnectFn","MEDIA_PEER_CONNECTION_NAME","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","resolve","timeout","localDescription","RETRY_TIMEOUT","ICE_TIMEOUT","onicecandidate","evt","candidate","clearTimeout","replaceTrack","track","senders","getSenders","sender","kind","err","addStream","stream","bowser","msedge","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","meetingId","log","signalingState","Metrics","postEvent","event","eventType","REMOTE_SDP_RECEIVED","data","canProceed","errors","generateErrorPayload","MEDIA_ENGINE","HAVE_LOCAL_OFFER","STABLE","OFFER","setRemoteDescription","window","RTCSessionDescription","type","then","catch","reject","MediaError","createOffer","description","setLocalDescription","LOCAL_SDP_GENERATED","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","params","meeting","mediaProperties","mediaSettings","createAnswer","peerconnection","receiveShare","localShare","sdpConstraints","answer","connectionState","PEER_CONNECTION_STATE","CLOSED"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable */\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\nimport bowser from 'bowser';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  AUDIO_BANDWIDTH_LIMIT,\n  VIDEO_BANDWIDTH_LIMIT,\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  AUDIO,\n  SDP,\n  MEDIA_PEER_CONNECTION_NAME,\n  ICE_STATE,\n  ICE_FAIL_TIMEOUT,\n  PEER_CONNECTION_STATE\n} from '../constants';\n\nimport {error, eventType} from '../metrics/config'\n\nimport MediaError from '../common/errors/media';\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp \n * @param {String} sdpLines \n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = AUDIO_BANDWIDTH_LIMIT;\n  } else {\n    limit = VIDEO_BANDWIDTH_LIMIT;\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp \n * @returns {String}\n */\nconst setMaxFs = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const payloadTypes = sdp.match(/\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*/g);\n  if (payloadTypes) {\n    payloadTypes.forEach((payload) => {\n      replaceSdp = replaceSdp.replace(payload, `${payload};${SDP.MAX_FS_8160}`);\n    });\n  }\n  return replaceSdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp \n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n  if (videoPresent) {\n    return !!h264Present;\n  }\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {Boolean}\n */\nconst validateSdp = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n  parsedSdp.media.forEach((mediaLine) => {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Ice candadate never completed');\n      return false;\n    }\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Found invalid port number for the ice candidate');\n      return false;\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: ice ufrag and password not found');\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp \n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n\n/**\n * sets up a listener for ice fails mid meeting\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} fn\n * @param {Function} name - the name for logging, on the transceiver\n * @returns {undefined}\n */\npc.iceFailListener = (peerConnection, fn, name) => {\n  if (!peerConnection) {\n    return;\n  }\n  peerConnection.oniceconnectionstatechange = () => {\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.FAILED:\n      case ICE_STATE.DISCONNECTED:\n        LoggerProxy.logger.warn(`PeerConnectionManager->oniceconnectionstatechange#${name} Interactive Connectivity Establishment(ICE)${peerConnection.iceConnectionState} at ${new Date()}`);\n        setTimeout(() => {\n          switch (peerConnection.iceConnectionState) {\n            case ICE_STATE.FAILED:\n            case ICE_STATE.DISCONNECTED:\n              // if ice is still failed after some time, do the reconnect\n              // else the browser resolves the ice failure on its own\n              fn();\n              break;\n            default:\n            break;\n          }\n        }, ICE_FAIL_TIMEOUT);\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * waits for failures and calls the reconnect function on failures\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} [reconnectFn] - if not included, just prints a log\n * @returns {undefined}\n */\npc.detectFailures = (peerConnection, reconnectFn = () => {LoggerProxy.logger.error('PeerConnectionManager->reconnectFn#Ice failed, no function to reconnect with.')}) => {\n  peerConnection.iceFailListener(peerConnection, reconnectFn, MEDIA_PEER_CONNECTION_NAME);\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPC\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection) =>\n  new Promise((resolve) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(peerConnection.sdp)) {\n        setTimeout(() => {\n          resolve(peerConnection);\n        }, RETRY_TIMEOUT);\n      } else {\n        resolve(peerConnection);\n      }\n    }, ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = (evt) => {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(peerConnection.sdp);\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager->replaceTrack#Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !bowser.msedge) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (bowser.msedge) {\n      peerConnection.addStream(stream);\n    } else {\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`peer-connection-manager->addStream#Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (peerConnection, typeStr, remoteSdp, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->setRemoteSessionDetails#Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if(!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId, data: {\n      canProceed: false,\n      errors: [Metrics.generateErrorPayload(2001, true,\n        error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n    }})\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    return peerConnection.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp\n        })\n      )\n      .then(() => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId}))\n      .catch((error) => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [Metrics.generateErrorPayload(2001, true,\n          error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }}))\n  }\n\n    return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, meetingId) => {\n  LoggerProxy.logger.log('PeerConnectionManager->createOffer#createOffer: creating a new offer');\n\n  try {\n    return peerConnection\n      .createOffer()\n      .then((description) => peerConnection.setLocalDescription(description))\n      .then(() => pc.iceCandidate(peerConnection))\n      .then(() => {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp);\n        if (!checkH264Support(peerConnection.sdp)) {\n          throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n        }\n\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n        pc.setContentSlides(peerConnection);\n\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId: meetingId})\n        return peerConnection;\n      })\n      .catch((err) => {\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId: meetingId,\n          data: {\n            canProceed: false,\n             errors: [\n               Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }})\n        pc.close(peerConnection);\n        throw err;\n      });\n  } catch (err) {\n    throw err;\n  }\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => {\n  return peerConnection\n    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n    .then(() => peerConnection)\n    .catch((err) => {\n      return Promise.error(err);\n    });\n};\n\n/**\n * @param {Object} params {\n *  offerToReceiveAudio: {Boolean} sdp constraints\n *  offerToReceiveVideo: {Boolean} sdp constraints\n *  offerSdp: {sdp}\n *  stream: {pcStream}\n * }\n * @returns {Array} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->updatePeerConnection#updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, mediaSettings} = params.meeting.mediaProperties;\n\n  return pc.createAnswer({\n    peerConnection,\n      offerSdp: params.offerSdp[0]\n    }).then((peerconnection) => {\n    if (mediaSettings.receiveShare || localShare) {\n      pc.setContentSlides(peerconnection);\n    }\n    return [peerconnection.sdp];\n  });\n};\n\n/**\n * @param {Object} params {\n *  peerConnection: {Object} peerConnection\n *  sdpConstraints: {Object} sdp constraints\n * }\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === 'have-remote-offer') {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, 'offer', params.offerSdp)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n      //   if (edonusHack()) {\n      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');\n      //   }\n      peerConnection.setLocalDescription(answer)\n    )\n    .then(() => pc.iceCandidate(peerConnection))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      return peerConnection;\n    })\n    .catch((err) => {\n      LoggerProxy.logger.error(`peer-connection-manager->setRemoteSessionDetails#Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n\n  if(peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager->close#pc: close() -> closing the mediaPeerConnection');\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\nexport default pc;\n"]}