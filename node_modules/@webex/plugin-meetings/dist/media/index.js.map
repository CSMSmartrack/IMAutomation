{"version":3,"sources":["index.js"],"names":["Media","setLocalTrack","enabled","track","reconnectMedia","peerConnection","meetingId","connectionState","PEER_CONNECTION_STATE","CLOSED","FAILED","reject","ReconnectionError","PeerConnectionManager","createOffer","generateLocalMedias","mediaId","audioMuted","videoMuted","localSdp","getLocalMedia","options","sendAudio","sendVideo","sendShare","getMedia","getDisplayMedia","resolve","undefined","checkTracks","trackType","receiveTracks","getDirection","sendTracks","direction","attachMedia","mediaProperties","mediaDirection","audioTrack","videoTrack","shareTrack","result","receiveAudio","audioTransceiver","addTransceiver","receiveVideo","videoTransceiver","receiveShare","shareTransceiver","onnegotiationneeded","event","LoggerProxy","logger","info","updateMedia","setTrackOnTransceiver","type","sendTrack","receiveTrack","transceiver","sender","replaceTrack","e","updateTransceiver","navigator","mediaDevices","audio","video","mediaConfig","deviceId","width","ideal","config","meetings","resolution","idealWidth","max","maxWidth","height","idealHeight","maxHeight","getUserMedia","then","stream","catch","err","MediaError","Error","name","localMediaFailed","cameraFailed","permissionDenied","getSupportedDevice","enumerateDevices","devices","supported","filter","device","kind","AUDIO_INPUT","length","VIDEO_INPUT","getDevices","toggleStream","stopTracks","stop","error","readyState","stopStream","getTracks","forEach","mediaSetting","audioVideo","localStream","shareStream"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n/* globals navigator */\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  AUDIO_INPUT,\n  VIDEO_INPUT,\n  PEER_CONNECTION_STATE\n} from '../constants';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport ReconnectionError from '../common/errors/reconnection';\nimport MediaError from '../common/errors/media';\nimport config from '../config';\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property sendAudio\n * @property sendVideo\n * @property sendShare\n */\n/**\n *\n * @public\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\nconst Media = {};\n\n/**\n * @param {boolean} enabled\n * @param {MediaStreamTrack} track\n * @returns {Boolean}\n * @public\n */\nMedia.setLocalTrack = (enabled, track) => {\n  if (track) {\n    track.enabled = !enabled;\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} meetingId\n * @returns {Promise}\n */\nMedia.reconnectMedia = (peerConnection, meetingId) => {\n  if (peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED ||\n    peerConnection.connectionState === PEER_CONNECTION_STATE.FAILED) {\n    return Promise.reject(new ReconnectionError('Reinitiate peerconnection'));\n  }\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * format the media array for send\n * @param {String} mediaId\n * @param {Boolean} audioMuted\n * @param {Boolean} videoMuted\n * @returns {Array} medias\n */\nMedia.generateLocalMedias = (mediaId, audioMuted, videoMuted) => {\n  if (mediaId) {\n    return [\n      {\n        localSdp: JSON.stringify({\n          audioMuted,\n          videoMuted\n        }),\n        mediaId\n      }\n    ];\n  }\n\n  return [];\n};\n\n/**\n * make a browser call to get the media\n * @param {SendOptions} options\n * @returns {Promise}\n */\nMedia.getLocalMedia = (options) => {\n  const {sendAudio, sendVideo, sendShare} = options;\n  // we return undefined here as the second param until screen share is implemented\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo);\n  }\n\n  if (sendShare) {\n    return Media.getDisplayMedia(\n      {\n        sendAudio: false,\n        sendShare: true\n      }\n    );\n  }\n\n  return Promise.resolve(undefined);\n};\n/**\n * Returns the direction and tracks\n * @param {string} trackType type of track (audio/video)\n * @param {object}  track  tracks passed\n * @param {boolean} receiveTracks do you want to receive tracks from the remote side\n * @returns {Object} returns direction tracks to be added in transceiver\n */\nMedia.checkTracks = (trackType, track, receiveTracks) => {\n  const getDirection = (sendTracks, receiveTracks) => {\n    if (sendTracks && receiveTracks) {\n      return 'sendrecv';\n    } if (sendTracks && !receiveTracks) {\n      return 'sendonly';\n    } if (!sendTracks && receiveTracks) {\n      return 'recvonly';\n    } if (sendTracks && receiveTracks) {\n      return 'inactive';\n    }\n\n    return 'inactive';\n  };\n\n  if (track) {\n    return {track, direction: getDirection(!!track, receiveTracks)};\n  }\n\n  return {track: trackType, direction: getDirection(!!track, receiveTracks)};\n};\n/**\n * creates peerconnection and attaches streams\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingId call flow id\n * @returns {Array} [peerConnection, ]\n */\nMedia.attachMedia = (mediaProperties, meetingId) => {\n  const {\n    mediaDirection, audioTrack, videoTrack, shareTrack, peerConnection\n  } = mediaProperties;\n\n  let result = null;\n\n  // Add Transceiver for audio\n  result = Media.checkTracks('audio', mediaDirection.sendAudio && audioTrack, mediaDirection.receiveAudio);\n  peerConnection.audioTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for video\n  result = Media.checkTracks('video', mediaDirection.sendVideo && videoTrack, mediaDirection.receiveVideo);\n  peerConnection.videoTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for share\n  result = Media.checkTracks('video', mediaDirection.sendShare && shareTrack, mediaDirection.receiveShare);\n  peerConnection.shareTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media->attachMedia/onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * updates all the media streams and creates a new media offer\n * @param {MediaDirection} mediaProperties\n * @param {String} meetingId\n * @returns {Promise}\n */\nMedia.updateMedia = (mediaProperties, meetingId) => {\n  const {\n    mediaDirection, audioTrack, videoTrack, shareTrack, peerConnection\n  } = mediaProperties;\n\n  // update audio transceiver\n  Media.setTrackOnTransceiver(peerConnection.audioTransceiver, {\n    type: 'audio',\n    track: audioTrack,\n    sendTrack: mediaDirection.sendAudio && audioTrack,\n    receiveTrack: mediaDirection.receiveAudio\n  });\n\n  // update video transceiver\n  Media.setTrackOnTransceiver(peerConnection.videoTransceiver, {\n    type: 'video',\n    track: videoTrack,\n    sendTrack: mediaDirection.sendVideo && videoTrack,\n    receiveTrack: mediaDirection.receiveVideo\n  });\n\n  // update content transceiver\n  Media.setTrackOnTransceiver(peerConnection.shareTransceiver, {\n    type: 'video',\n    track: shareTrack,\n    sendTrack: mediaDirection.sendShare && shareTrack,\n    receiveTrack: mediaDirection.receiveShare\n  });\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media->attachMedia/onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options\n * @param {MediaStreamTrack} options.track\n * @returns {undefined}\n */\nMedia.setTrackOnTransceiver = (transceiver, options) => {\n  const {\n    type, track, sendTrack, receiveTrack\n  } = options;\n\n  try {\n    const result = Media.checkTracks(type, sendTrack && track, receiveTrack);\n\n    if (options.track) {\n      transceiver.sender.replaceTrack(track);\n    }\n    transceiver.direction = result.direction;\n  }\n  catch (e) {\n    throw e;\n  }\n};\n\n/**\n * creates a new offer\n * @param {String} meetingId\n * @param {RTCPeerConnection} peerConnection\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options see #Media.setTrackOnTransceiver\n * @returns {Promise}\n */\nMedia.updateTransceiver = (meetingId, peerConnection, transceiver, options) => {\n  Media.setTrackOnTransceiver(transceiver, options);\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * generates share streams (chrome)\n * @param {object} options parameter\n * @param {Object} options.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} options.sendShare sendScreen: {Boolean} sendShare constraints\n * @returns {Object} {streams}\n */\nMedia.getDisplayMedia = (options) =>\n  navigator.mediaDevices.getDisplayMedia({audio: options.sendAudio, video: options.sendShare});\n\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object} audio audio: {Boolean} gum constraints\n * @param {Object} video video: {Boolean} gum constraints\n * @returns {Object} {streams}\n */\nMedia.getMedia = (audio, video) => {\n  const mediaConfig = {\n    audio,\n    video: video ? {\n      deviceId: video.deviceId ? video.deviceId : undefined,\n      width: {ideal: config.meetings.resolution.idealWidth, max: config.meetings.resolution.maxWidth},\n      height: {ideal: config.meetings.resolution.idealHeight, max: config.meetings.resolution.maxHeight}\n    } : false\n  };\n\n  return new Promise((resolve, reject) => {\n    navigator.mediaDevices\n      .getUserMedia(mediaConfig)\n      .then((stream) => {\n        resolve(stream);\n      })\n      .catch((err) => {\n        reject(\n          new MediaError(new Error({\n            name: err.name,\n            localMediaFailed: true,\n            cameraFailed: err === mediaConfig.permissionDenied\n          }), 'Local Get User Media failed')\n        );\n      });\n  });\n};\n\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} [options]\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\nMedia.getSupportedDevice = ({sendAudio, sendVideo}) =>\n  Promise.resolve().then(() => {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: true,\n        sendVideo: true\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const supported = {\n        audio: devices.filter((device) => device.kind === AUDIO_INPUT).length > 0,\n        video: devices.filter((device) => device.kind === VIDEO_INPUT).length > 0\n      };\n\n      return {\n        sendAudio: (supported.audio && sendAudio) || true,\n        sendVideo: (supported.video && sendVideo) || true\n      };\n    });\n  });\n\n/**\n * proxy to browser navigator.mediaDevices.enumerateDevices()\n * @returns {Promise}\n */\nMedia.getDevices = () => {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  return Promise.reject(new MediaError('enumerateDevices not supported.'));\n};\n\n/**\n *\n * Toggle a specific stream\n * noop as of now, does nothing\n * @returns {null}\n */\nMedia.toggleStream = () => {};\n\n/**\n * Stop input stream\n * @param {MediaTrack} track A media stream\n * @returns {null}\n */\nMedia.stopTracks = (track) => {\n  if (!track) {\n    return Promise.resolve();\n  }\n\n  return Promise.resolve().then(() => {\n    if (track && track.stop) {\n      try {\n        track.stop();\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`media/index->stopTracks#Unable to stop the track with state ${track.readyState}, error: ${e}`);\n      }\n    }\n  });\n};\n\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n */\nMedia.stopStream = (stream) => {\n  if (!stream) {\n    return Promise.resolve();\n  }\n\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n  return Promise.resolve().then(() => {\n    if (stream.getTracks) {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    }\n    else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendScreen sendScreen: {Boolean} sendShare constraints\n * @param {Object} audioVideo parameter\n * @param {Object} audioVideo.audio {deviceId: {String}}\n * @param {Object} audioVideo.video {deviceId: {String}}\n * @returns {Array} [localStream, shareStream]\n */\nMedia.getUserMedia = (mediaSetting, audioVideo) => Media.getLocalMedia({\n  sendAudio: mediaSetting.sendAudio ? audioVideo.audio || mediaSetting.sendAudio : false,\n  sendVideo: mediaSetting.sendVideo ? audioVideo.video || mediaSetting.sendVideo : false\n}).then((localStream) => Media.getLocalMedia({\n  sendShare: mediaSetting.sendShare\n}).then((shareStream) => [localStream, shareStream]));\n\nexport default Media;\n"]}